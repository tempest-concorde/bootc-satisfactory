# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
name: On push of a tag
on:
  push:
    tags:
    - v*

env:
  REGISTRY_USER: butler54
  REGISTRY_NAMESPACE: tempest-concorde
  IMAGE_REGISTRY: ghcr.io
  IMAGE: satisfactory

jobs:
  buildrelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
  
    - name: Parse version
      id: parse_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download ficsit
      run: |
        make get-ficsit

    - name: Download and decompress steam
      run: | 
        mkdir -p steam
        cd steam && curl -sqL "https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz" | tar zxvf -

    - name: Log in to ghcr.io
      uses: redhat-actions/podman-login@v1
      with:
        username: ${{ env.REGISTRY_USER }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ env.IMAGE_REGISTRY }}

    - name: Build Image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: "${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE }}"
        tags: latest prod ${{ steps.parse_version.outputs.VERSION }} ${{ github.sha }}
        containerfiles: |
          ./Containerfile
  
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.7.0
    
    - name: push to registry
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ env.IMAGE }}
        tags: latest prod ${{ steps.parse_version.outputs.VERSION }} ${{ github.sha }} 
        registry: ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}
    
    - name: what would we sign
      run: podman image inspect --format '{{ .Digest }}' ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE }}
      
    - name: Sign image
      run: cosign sign  --yes -a tag=${{ steps.parse_version.outputs.VERSION }} -a tag=prod -a tag=latest -a tag=${{ github.sha }} -a sha=${{ github.sha }} -a run_id=${{github.run_id}} -a run_attempt="$GITHUB_RUN_ATTEMPT" ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE }}:prod
    - name: delete secrets
      if: always()
      run: rm -f auth.json